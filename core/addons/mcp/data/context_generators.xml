<?xml version="1.0" encoding="utf-8"?>
<odoo>
    <data noupdate="0">
        <!-- Basisgeneratoren für allgemeine Geschäftsprozesse -->
        <record id="context_generator_base_company" model="mcp.context">
            <field name="name">Unternehmenskontext</field>
            <field name="code">base_company</field>
            <field name="description">Extrahiert grundlegende Unternehmensinformationen aus dem System</field>
            <field name="model_id" ref="base.model_res_company"/>
            <field name="active">true</field>
            <field name="sequence">10</field>
            <field name="generate_method">python</field>
            <field name="python_code">
# Unternehmensinformationen abrufen
company = env.company
result = {
    'name': company.name,
    'currency': company.currency_id.name,
    'country': company.country_id.name if company.country_id else '',
    'website': company.website,
    'email': company.email,
    'phone': company.phone,
    'industry': company.industry_id.name if company.industry_id else '',
    'employees': company.employees,
    'fiscal_year_start': '%s-%s' % (company.fiscalyear_last_month, company.fiscalyear_last_day) if company.fiscalyear_last_month else '',
    'vat': company.vat
}
return result
            </field>
        </record>
        
        <record id="context_generator_base_user" model="mcp.context">
            <field name="name">Benutzerkontext</field>
            <field name="code">base_user</field>
            <field name="description">Extrahiert Informationen über den aktuellen Benutzer</field>
            <field name="model_id" ref="base.model_res_users"/>
            <field name="active">true</field>
            <field name="sequence">20</field>
            <field name="generate_method">python</field>
            <field name="python_code">
# Benutzerinformationen abrufen
user = env.user
result = {
    'name': user.name,
    'email': user.email,
    'lang': user.lang,
    'tz': user.tz,
    'company': user.company_id.name,
    'groups': [g.name for g in user.groups_id if not g.is_portal and not g.is_public],
    'has_sales_access': user.has_group('sales_team.group_sale_salesman'),
    'has_purchase_access': user.has_group('purchase.group_purchase_user'),
    'has_accounting_access': user.has_group('account.group_account_user'),
    'has_inventory_access': user.has_group('stock.group_stock_user'),
    'has_admin_access': user.has_group('base.group_system')
}
return result
            </field>
        </record>
    </data>
</odoo> 