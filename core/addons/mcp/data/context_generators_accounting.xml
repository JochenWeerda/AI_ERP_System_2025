<?xml version="1.0" encoding="utf-8"?>
<odoo>
    <data noupdate="0">
        <!-- Kontextgeneratoren für Buchhaltungsprozesse -->
        <record id="context_generator_accounting_invoice" model="mcp.context">
            <field name="name">Rechnungskontext</field>
            <field name="code">accounting_invoice</field>
            <field name="description">Extrahiert Informationen über eine Rechnung</field>
            <field name="model_id" ref="account.model_account_move"/>
            <field name="active">true</field>
            <field name="sequence">200</field>
            <field name="generate_method">python</field>
            <field name="python_code">
# Rechnungsdaten abrufen
if not record or not record._name == 'account.move' or record.move_type not in ['out_invoice', 'in_invoice', 'out_refund', 'in_refund']:
    return {'error': 'Keine gültige Rechnung ausgewählt'}

invoice = record
partner = invoice.partner_id

# Rechnungstyp bestimmen
invoice_type_map = {
    'out_invoice': 'Ausgangsrechnung',
    'in_invoice': 'Eingangsrechnung',
    'out_refund': 'Kundengutschrift',
    'in_refund': 'Lieferantengutschrift'
}
invoice_type = invoice_type_map.get(invoice.move_type, 'Unbekannt')

result = {
    'invoice_number': invoice.name,
    'reference': invoice.ref or '',
    'type': invoice_type,
    'partner': partner.name,
    'issue_date': invoice.invoice_date.strftime('%Y-%m-%d') if invoice.invoice_date else '',
    'due_date': invoice.invoice_date_due.strftime('%Y-%m-%d') if invoice.invoice_date_due else '',
    'currency': invoice.currency_id.name,
    'amount_untaxed': invoice.amount_untaxed,
    'amount_tax': invoice.amount_tax,
    'amount_total': invoice.amount_total,
    'state': invoice.state,
    'payment_state': invoice.payment_state,
    'payment_term': invoice.invoice_payment_term_id.name if invoice.invoice_payment_term_id else '',
    'journal': invoice.journal_id.name,
    'invoice_lines': [{
        'product': line.product_id.name if line.product_id else '',
        'description': line.name,
        'quantity': line.quantity,
        'unit_price': line.price_unit,
        'discount': line.discount,
        'tax': ', '.join([tax.name for tax in line.tax_ids]),
        'subtotal': line.price_subtotal
    } for line in invoice.invoice_line_ids]
}
return result
            </field>
        </record>
        
        <record id="context_generator_accounting_payment" model="mcp.context">
            <field name="name">Zahlungskontext</field>
            <field name="code">accounting_payment</field>
            <field name="description">Extrahiert Informationen über eine Zahlung</field>
            <field name="model_id" ref="account.model_account_payment"/>
            <field name="active">true</field>
            <field name="sequence">210</field>
            <field name="generate_method">python</field>
            <field name="python_code">
# Zahlungsdaten abrufen
if not record or not record._name == 'account.payment':
    return {'error': 'Keine gültige Zahlung ausgewählt'}

payment = record
partner = payment.partner_id

# Zahlungstyp bestimmen
payment_type_map = {
    'inbound': 'Eingehende Zahlung',
    'outbound': 'Ausgehende Zahlung'
}
payment_type = payment_type_map.get(payment.payment_type, 'Unbekannt')

result = {
    'reference': payment.name,
    'partner': partner.name if partner else '',
    'type': payment_type,
    'date': payment.date.strftime('%Y-%m-%d'),
    'journal': payment.journal_id.name,
    'payment_method': payment.payment_method_id.name,
    'amount': payment.amount,
    'currency': payment.currency_id.name,
    'state': payment.state,
    'communication': payment.ref or '',
    'related_invoices': [{
        'invoice_number': inv.name,
        'date': inv.date.strftime('%Y-%m-%d'),
        'amount': inv.amount_total,
        'allocated_amount': rec.amount
    } for rec in payment.reconciled_bill_ids for inv in rec.move_id] if payment.reconciled_bill_ids else []
}
return result
            </field>
        </record>
        
        <record id="context_generator_accounting_financial" model="mcp.context">
            <field name="name">Finanzkennzahlenkontext</field>
            <field name="code">accounting_financial</field>
            <field name="description">Extrahiert Finanzkennzahlen für eine Periode</field>
            <field name="model_id" ref="account.model_account_move_line"/>
            <field name="active">true</field>
            <field name="sequence">220</field>
            <field name="generate_method">python</field>
            <field name="python_code">
# Parameter abrufen
company_id = params.get('company_id', env.company.id)
date_from = params.get('date_from')
date_to = params.get('date_to')

if not date_from or not date_to:
    # Wenn keine Daten angegeben sind, aktuelles Quartal verwenden
    today = fields.Date.today()
    month = today.month
    year = today.year
    quarter = (month - 1) // 3 + 1
    date_from = fields.Date.to_string(date(year, (quarter - 1) * 3 + 1, 1))
    if quarter < 4:
        date_to = fields.Date.to_string(date(year, quarter * 3 + 1, 1) - timedelta(days=1))
    else:
        date_to = fields.Date.to_string(date(year, 12, 31))

# Finanzkennzahlen berechnen
AccountMoveLine = env['account.move.line']
AccountAccount = env['account.account']

# Umsatz (Erlöskonten)
revenue_accounts = AccountAccount.search([
    ('company_id', '=', company_id),
    ('account_type', '=', 'income')
])
revenue = sum(AccountMoveLine.search([
    ('account_id', 'in', revenue_accounts.ids),
    ('date', '>=', date_from),
    ('date', '<=', date_to),
    ('parent_state', '=', 'posted')
]).mapped('balance')) * -1  # Negieren, da Erlöse als negative Zahlen gespeichert werden

# Kosten (Aufwandskonten)
expense_accounts = AccountAccount.search([
    ('company_id', '=', company_id),
    ('account_type', '=', 'expense')
])
expenses = sum(AccountMoveLine.search([
    ('account_id', 'in', expense_accounts.ids),
    ('date', '>=', date_from),
    ('date', '<=', date_to),
    ('parent_state', '=', 'posted')
]).mapped('balance'))

# Nettogewinn
net_profit = revenue - expenses

# Offene Forderungen
receivable_accounts = AccountAccount.search([
    ('company_id', '=', company_id),
    ('account_type', '=', 'asset_receivable')
])
receivables = sum(AccountMoveLine.search([
    ('account_id', 'in', receivable_accounts.ids),
    ('date', '<=', date_to),
    ('parent_state', '=', 'posted'),
    ('reconciled', '=', False)
]).mapped('balance'))

# Offene Verbindlichkeiten
payable_accounts = AccountAccount.search([
    ('company_id', '=', company_id),
    ('account_type', '=', 'liability_payable')
])
payables = sum(AccountMoveLine.search([
    ('account_id', 'in', payable_accounts.ids),
    ('date', '<=', date_to),
    ('parent_state', '=', 'posted'),
    ('reconciled', '=', False)
]).mapped('balance')) * -1  # Negieren, da Verbindlichkeiten als negative Zahlen gespeichert werden

# Barmittel und Bankguthaben
liquidity_accounts = AccountAccount.search([
    ('company_id', '=', company_id),
    ('account_type', '=', 'asset_cash')
])
cash_and_bank = sum(AccountMoveLine.search([
    ('account_id', 'in', liquidity_accounts.ids),
    ('date', '<=', date_to),
    ('parent_state', '=', 'posted')
]).mapped('balance'))

# Ergebnis zusammenstellen
result = {
    'period': {
        'from': date_from,
        'to': date_to,
    },
    'revenue': revenue,
    'expenses': expenses,
    'net_profit': net_profit,
    'profit_margin': (net_profit / revenue * 100) if revenue else 0,
    'receivables': receivables,
    'payables': payables,
    'cash_and_bank': cash_and_bank,
    'current_ratio': (receivables + cash_and_bank) / payables if payables else float('inf'),
    'quick_ratio': cash_and_bank / payables if payables else float('inf')
}
return result
            </field>
        </record>
    </data>
</odoo> 