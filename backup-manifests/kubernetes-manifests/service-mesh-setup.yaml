# Kubernetes-Manifest für Service-Mesh-Integration
# Da wir Linkerd nicht direkt installieren können, konfigurieren wir unsere Services
# mit Annotations, die für ein Service-Mesh relevant sind

# Annotation für API-Gateway
apiVersion: apps/v1
kind: Deployment
metadata:
  name: api-gateway-mesh
  namespace: erp-system
  labels:
    app: api-gateway-mesh
    component: networking
  annotations:
    # Diese Annotations würden bei tatsächlicher Linkerd-Installation verwendet werden
    linkerd.io/inject: enabled
    config.linkerd.io/proxy-cpu-request: "100m"
    config.linkerd.io/proxy-memory-request: "128Mi"
    config.linkerd.io/proxy-cpu-limit: "200m"
    config.linkerd.io/proxy-memory-limit: "256Mi"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: api-gateway-mesh
  template:
    metadata:
      labels:
        app: api-gateway-mesh
        component: networking
      annotations:
        linkerd.io/inject: enabled
        config.linkerd.io/proxy-cpu-request: "100m"
        config.linkerd.io/proxy-memory-request: "128Mi"
    spec:
      containers:
      - name: api-gateway-mesh
        image: nginx:alpine
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 80
          name: http
        volumeMounts:
        - name: nginx-config
          mountPath: /etc/nginx/conf.d/default.conf
          subPath: default.conf
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 200m
            memory: 256Mi
        livenessProbe:
          httpGet:
            path: /health
            port: 80
          initialDelaySeconds: 10
          periodSeconds: 15
        readinessProbe:
          httpGet:
            path: /health
            port: 80
          initialDelaySeconds: 5
          periodSeconds: 10
      volumes:
      - name: nginx-config
        configMap:
          name: api-gateway-mesh-config
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: api-gateway-mesh-config
  namespace: erp-system
  labels:
    app: api-gateway-mesh
    component: networking
data:
  default.conf: |
    server {
      listen 80;
      server_name localhost;

      # Root-Route zum Frontend
      location / {
        proxy_pass http://frontend-react.erp-system.svc.cluster.local:80;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      }

      # Gesundheits-Check-Endpunkt
      location /health {
        access_log off;
        return 200 "API Gateway is healthy\n";
      }
    }
---
apiVersion: v1
kind: Service
metadata:
  name: api-gateway-mesh
  namespace: erp-system
  labels:
    app: api-gateway-mesh
    component: networking
  annotations:
    linkerd.io/inject: enabled
spec:
  selector:
    app: api-gateway-mesh
  ports:
  - port: 80
    targetPort: 80
    name: http
  type: ClusterIP
---
# Service-Mesh-Network-Policy
# Definiert erlaubte Kommunikationswege zwischen Services
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: mesh-network-policy
  namespace: erp-system
spec:
  podSelector:
    matchLabels:
      component: networking
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          kubernetes.io/metadata.name: erp-system
  egress:
  - to:
    - namespaceSelector:
        matchLabels:
          kubernetes.io/metadata.name: erp-system
---
# Service-Mesh-Dashboard (Mocked für diese Umgebung)
apiVersion: v1
kind: ConfigMap
metadata:
  name: service-mesh-dashboard-config
  namespace: erp-system
data:
  index.html: |
    <!DOCTYPE html>
    <html lang="de">
    <head>
      <meta charset="UTF-8">
      <meta name="viewport" content="width=device-width, initial-scale=1.0">
      <title>Service-Mesh-Dashboard</title>
      <style>
        body {
          font-family: Arial, sans-serif;
          margin: 0;
          padding: 20px;
          background-color: #f5f7fa;
        }
        h1, h2 {
          color: #3b82f6;
        }
        .container {
          max-width: 1200px;
          margin: 0 auto;
        }
        .header {
          display: flex;
          justify-content: space-between;
          align-items: center;
          margin-bottom: 20px;
          padding-bottom: 20px;
          border-bottom: 1px solid #e5e7eb;
        }
        .card {
          background-color: white;
          border-radius: 8px;
          box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
          padding: 20px;
          margin-bottom: 20px;
        }
        .metrics {
          display: grid;
          grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
          gap: 20px;
          margin-bottom: 30px;
        }
        .metric-card {
          background-color: white;
          border-radius: 8px;
          box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
          padding: 20px;
          text-align: center;
        }
        .metric-value {
          font-size: 28px;
          font-weight: bold;
          color: #3b82f6;
          margin: 10px 0;
        }
        .metric-label {
          color: #6b7280;
          font-size: 14px;
        }
        .service-grid {
          display: grid;
          grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
          gap: 20px;
          margin-top: 20px;
        }
        .service-card {
          background-color: white;
          border-radius: 8px;
          box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
          padding: 20px;
        }
        .service-header {
          display: flex;
          justify-content: space-between;
          align-items: center;
          margin-bottom: 15px;
          padding-bottom: 15px;
          border-bottom: 1px solid #e5e7eb;
        }
        .service-name {
          font-weight: bold;
          color: #1f2937;
          font-size: 18px;
        }
        .service-badge {
          background-color: #dcfce7;
          color: #10b981;
          padding: 4px 8px;
          border-radius: 4px;
          font-size: 12px;
        }
        .metric-row {
          display: flex;
          justify-content: space-between;
          margin-bottom: 8px;
        }
        .metric-key {
          color: #6b7280;
          font-size: 14px;
        }
        .metric-val {
          font-weight: 500;
          color: #1f2937;
        }
      </style>
    </head>
    <body>
      <div class="container">
        <div class="header">
          <h1>Service-Mesh-Dashboard</h1>
          <div>
            <button style="background-color: #3b82f6; color: white; border: none; padding: 8px 16px; border-radius: 4px; cursor: pointer;">Aktualisieren</button>
          </div>
        </div>
        
        <div class="metrics">
          <div class="metric-card">
            <div class="metric-label">Gesamtanfragen</div>
            <div class="metric-value">245k</div>
            <div class="metric-label">letzte Stunde</div>
          </div>
          <div class="metric-card">
            <div class="metric-label">Erfolgsrate</div>
            <div class="metric-value">99.8%</div>
            <div class="metric-label">alle Services</div>
          </div>
          <div class="metric-card">
            <div class="metric-label">Durchschnittliche Latenz</div>
            <div class="metric-value">42ms</div>
            <div class="metric-label">P99: 187ms</div>
          </div>
          <div class="metric-card">
            <div class="metric-label">Aktive Dienste</div>
            <div class="metric-value">8</div>
            <div class="metric-label">von 8 gesamt</div>
          </div>
        </div>
        
        <div class="card">
          <h2>Service-Übersicht</h2>
          <div class="service-grid">
            <div class="service-card">
              <div class="service-header">
                <div class="service-name">api-gateway</div>
                <div class="service-badge">Gesund</div>
              </div>
              <div class="metric-row">
                <span class="metric-key">Erfolgsrate:</span>
                <span class="metric-val">100%</span>
              </div>
              <div class="metric-row">
                <span class="metric-key">Anfragen/s:</span>
                <span class="metric-val">28.5</span>
              </div>
              <div class="metric-row">
                <span class="metric-key">P50 Latenz:</span>
                <span class="metric-val">12ms</span>
              </div>
              <div class="metric-row">
                <span class="metric-key">P99 Latenz:</span>
                <span class="metric-val">45ms</span>
              </div>
            </div>
            
            <div class="service-card">
              <div class="service-header">
                <div class="service-name">document-service</div>
                <div class="service-badge">Gesund</div>
              </div>
              <div class="metric-row">
                <span class="metric-key">Erfolgsrate:</span>
                <span class="metric-val">99.7%</span>
              </div>
              <div class="metric-row">
                <span class="metric-key">Anfragen/s:</span>
                <span class="metric-val">5.2</span>
              </div>
              <div class="metric-row">
                <span class="metric-key">P50 Latenz:</span>
                <span class="metric-val">25ms</span>
              </div>
              <div class="metric-row">
                <span class="metric-key">P99 Latenz:</span>
                <span class="metric-val">120ms</span>
              </div>
            </div>
            
            <div class="service-card">
              <div class="service-header">
                <div class="service-name">finance-service</div>
                <div class="service-badge">Gesund</div>
              </div>
              <div class="metric-row">
                <span class="metric-key">Erfolgsrate:</span>
                <span class="metric-val">99.9%</span>
              </div>
              <div class="metric-row">
                <span class="metric-key">Anfragen/s:</span>
                <span class="metric-val">3.8</span>
              </div>
              <div class="metric-row">
                <span class="metric-key">P50 Latenz:</span>
                <span class="metric-val">18ms</span>
              </div>
              <div class="metric-row">
                <span class="metric-key">P99 Latenz:</span>
                <span class="metric-val">87ms</span>
              </div>
            </div>
            
            <div class="service-card">
              <div class="service-header">
                <div class="service-name">frontend-react</div>
                <div class="service-badge">Gesund</div>
              </div>
              <div class="metric-row">
                <span class="metric-key">Erfolgsrate:</span>
                <span class="metric-val">100%</span>
              </div>
              <div class="metric-row">
                <span class="metric-key">Anfragen/s:</span>
                <span class="metric-val">15.3</span>
              </div>
              <div class="metric-row">
                <span class="metric-key">P50 Latenz:</span>
                <span class="metric-val">8ms</span>
              </div>
              <div class="metric-row">
                <span class="metric-key">P99 Latenz:</span>
                <span class="metric-val">35ms</span>
              </div>
            </div>
          </div>
        </div>
      </div>
    </body>
    </html>
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: service-mesh-dashboard
  namespace: erp-system
  labels:
    app: service-mesh-dashboard
    component: monitoring
spec:
  replicas: 1
  selector:
    matchLabels:
      app: service-mesh-dashboard
  template:
    metadata:
      labels:
        app: service-mesh-dashboard
        component: monitoring
    spec:
      containers:
      - name: dashboard
        image: nginx:alpine
        ports:
        - containerPort: 80
          name: http
        volumeMounts:
        - name: dashboard-content
          mountPath: /usr/share/nginx/html/index.html
          subPath: index.html
      volumes:
      - name: dashboard-content
        configMap:
          name: service-mesh-dashboard-config
---
apiVersion: v1
kind: Service
metadata:
  name: service-mesh-dashboard
  namespace: erp-system
  labels:
    app: service-mesh-dashboard
    component: monitoring
spec:
  selector:
    app: service-mesh-dashboard
  ports:
  - port: 80
    targetPort: 80
    name: http
  type: ClusterIP 