version: '3.8'

services:
  # Backend-Service für das modulare ERP-System
  erp-backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@erp-db:5432/erp
      - DEBUG=False
    depends_on:
      - erp-db
    volumes:
      - ./backend:/app/backend
    networks:
      - erp-network
    restart: unless-stopped

  # Datenbank-Service (PostgreSQL)
  erp-db:
    image: postgres:15-alpine
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=erp
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - erp-network
    restart: unless-stopped

  # API-Server
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: erp-api
    restart: unless-stopped
    ports:
      - "8003:8003"
    depends_on:
      - redis
    volumes:
      - ./logs:/app/logs
      - ./backend:/app/backend
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    networks:
      - erp-network

  # Redis-Server
  redis:
    build:
      context: ./docker/redis
      dockerfile: Dockerfile
    container_name: erp-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - erp-network

  # Redis-Exporter für Prometheus-Metriken
  redis-exporter:
    image: oliver006/redis_exporter:v1.45.0
    container_name: erp-redis-exporter
    restart: unless-stopped
    ports:
      - "9121:9121"
    depends_on:
      - redis
    environment:
      - REDIS_ADDR=redis://redis:6379
    networks:
      - erp-network

  # Celery-Worker
  celery-worker:
    build:
      context: .
      dockerfile: docker/celery/Dockerfile
    container_name: erp-celery-worker
    restart: unless-stopped
    depends_on:
      - redis
      - api
    volumes:
      - ./logs:/app/logs
      - ./backend:/app/backend
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    networks:
      - erp-network

  # Celery-Flower (Monitoring)
  flower:
    build:
      context: .
      dockerfile: docker/flower/Dockerfile
    container_name: erp-flower
    restart: unless-stopped
    ports:
      - "5555:5555"
    depends_on:
      - redis
      - celery-worker
    volumes:
      - ./backend:/app/backend
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - FLOWER_PORT=5555
    networks:
      - erp-network

  # Prometheus (Monitoring)
  prometheus:
    build:
      context: ./docker/prometheus
      dockerfile: Dockerfile
    container_name: erp-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - prometheus-data:/prometheus
    networks:
      - erp-network

  # Node-Exporter für Systemmetriken
  node-exporter:
    image: prom/node-exporter:v1.5.0
    container_name: erp-node-exporter
    restart: unless-stopped
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--path.rootfs=/rootfs'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - erp-network

  # Grafana (Visualisierung)
  grafana:
    build:
      context: ./docker/grafana
      dockerfile: Dockerfile
    container_name: erp-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    volumes:
      - grafana-data:/var/lib/grafana
    depends_on:
      - prometheus
    networks:
      - erp-network

networks:
  erp-network:
    driver: bridge

volumes:
  redis-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  postgres-data:
    driver: local 