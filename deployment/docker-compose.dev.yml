version: '3.8'

services:
  # MongoDB Service
  mongodb:
    image: mongo:latest
    container_name: neuroerp-mongodb-dev
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USER:-admin}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD:-secret}
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
    networks:
      - backend-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Redis Service
  redis:
    image: redis:latest
    container_name: neuroerp-redis-dev
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - backend-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # PostgreSQL Service
  postgres:
    image: postgres:latest
    container_name: neuroerp-postgres-dev
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-admin}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-secret}
      POSTGRES_DB: ${POSTGRES_DB:-neuroerp}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - backend-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Backend API Service (Development Mode)
  backend:
    build:
      context: ../core/backend
      dockerfile: Dockerfile.dev
    container_name: neuroerp-backend-dev
    restart: always
    depends_on:
      - mongodb
      - redis
      - postgres
    environment:
      - NODE_ENV=development
      - PORT=3000
      - MONGO_URI=mongodb://${MONGO_ROOT_USER:-admin}:${MONGO_ROOT_PASSWORD:-secret}@mongodb:27017
      - REDIS_URI=redis://redis:6379
      - POSTGRES_URI=postgresql://${POSTGRES_USER:-admin}:${POSTGRES_PASSWORD:-secret}@postgres:5432/${POSTGRES_DB:-neuroerp}
    ports:
      - "3000:3000"
      - "9229:9229" # Node.js debugging port
    volumes:
      - ../core/backend:/app
      - /app/node_modules
    networks:
      - frontend-network
      - backend-network
    command: npm run dev
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Frontend Service (Development Mode)
  frontend:
    build:
      context: ../core/frontend
      dockerfile: Dockerfile.dev
    container_name: neuroerp-frontend-dev
    restart: always
    depends_on:
      - backend
    ports:
      - "80:3000"
    volumes:
      - ../core/frontend:/app
      - /app/node_modules
    networks:
      - frontend-network
    environment:
      - REACT_APP_API_URL=http://localhost:3000
      - CHOKIDAR_USEPOLLING=true
    command: npm start
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Prometheus for Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: neuroerp-prometheus
    volumes:
      - ./monitoring/prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    ports:
      - "9090:9090"
    networks:
      - monitoring-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Grafana for Visualization
  grafana:
    image: grafana/grafana:latest
    container_name: neuroerp-grafana
    volumes:
      - ./monitoring/grafana:/etc/grafana/provisioning
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-secret}
      - GF_USERS_ALLOW_SIGN_UP=false
    ports:
      - "3001:3000"
    networks:
      - monitoring-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

networks:
  frontend-network:
    driver: bridge
  backend-network:
    driver: bridge
  monitoring-network:
    driver: bridge

volumes:
  mongodb_data:
  redis_data:
  postgres_data:
  prometheus_data:
  grafana_data: 